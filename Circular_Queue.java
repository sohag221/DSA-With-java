public class Circular_Queue {        private Node front;        private Node rear;        private int size;    public  static class Node {        int data;        Node next;        public Node(int data) {            this.data = data;            this.next = null;        }    }        public Circular_Queue() {            front = null;            rear = null;            size = 0;        }        public boolean isEmpty() {            return front == null;        }        public int size() {            return size;        }        public void enqueue(int data) {            Node newNode = new Node(data);            if (isEmpty()) {                front = newNode;                rear = newNode;            } else {                rear.next = newNode;                rear = newNode;            }            size++;        }        public int dequeue() {            if (isEmpty()) {                return -1;            }            int data = front.data;            if (front == rear) {                front = null;                rear = null;            } else {                front = front.next;            }            size--;            return data;        }    public void display() {        if (isEmpty()) {            System.out.println("The queue is empty.");            return;        }        Node node = front;        System.out.print("The queue is: ");        while (node != null) {            System.out.print(node.data + " ");            node = node.next;        }        System.out.println();    }        public static void main(String[] args) {        Circular_Queue cq=new Circular_Queue();        cq.enqueue(12);        cq.enqueue(3);        cq.enqueue(4);        cq.enqueue(6);        cq.enqueue(16);        cq.display();    }    }